Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].



class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
         vector<int> res;
        for(vector<int>::iterator j,i=nums.begin();i!=nums.end();++i)
        {
            if((j=find(nums.begin(),nums.end(),target-*i))!=nums.end()&&j!=i)
            {
                res.push_back(i-nums.begin());
                res.push_back(j-nums.begin());
                return res;
            }
                
        }                       
    }
};




class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //定义哈希表
		unordered_map<int,int> vec;
		vector<int> result;
        //建立哈希表，表索引为数值，表值为序号
        for(int i=0;i<nums.size();i++)
        vec[nums[i]]=i;
        for(int i=0;i<nums.size();i++)
        {
            int search=target-nums[i];   //计算查找的数
            if(vec.find(search)!=vec.end()&&vec[search]!=i)     //查找的数存在，且不是自己的两倍
            {
                result.push_back(i);
                result.push_back(vec[search]);   //insert indices
                   return result;
            }
        }
        return result;
     
}
};
